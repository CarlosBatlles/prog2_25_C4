""" Ejemplos de la API"""
import requests
import jwt
import tkinter as tk
from tkinter import filedialog
import datetime
from tabulate import tabulate


BASE_URL = "https://alexiss1.pythonanywhere.com/"  
TOKEN = None
ROL = None


def get_headers(auth_required: bool = False) -> dict[str, str]:
    """
    Devuelve los headers necesarios para las solicitudes HTTP.

    Parameters
    ----------
    auth_required : bool, optional
        Indica si se requiere autenticaci√≥n para la solicitud. 
        Por defecto es False.

    Returns
    -------
    dict[str, str]
        Diccionario con los headers HTTP, incluyendo 'Content-Type' y 
        opcionalmente 'Authorization' si se requiere autenticaci√≥n y 
        existe un TOKEN.

    Notes
    -----
    - El header 'Content-Type' se establece siempre como 'application/json'.
    - El header 'Authorization' se a√±ade solo si auth_required es True 
    y la variable global TOKEN est√° definida y no es None.
    """
    headers = {"Content-Type": "application/json"}
    if auth_required and TOKEN:
        headers["Authorization"] = f"Bearer {TOKEN}"
    return headers


def decode_token(token: str) -> dict:
    """
    Decodifica un token JWT para extraer sus claims.

    Parameters
    ----------
    token : str
        El token JWT que se desea decodificar.

    Returns
    -------
    dict
        Diccionario con las claims decodificadas del token si tiene √©xito,
        o un diccionario vac√≠o si ocurre un error.

    Notes
    -----
    - La decodificaci√≥n se realiza sin verificar la firma del token,
    lo cual solo debe usarse con fines educativos o de depuraci√≥n.
    - Requiere que la biblioteca `jwt` (PyJWT) est√© instalada.
    - Los errores durante la decodificaci√≥n se capturan y se imprimen,
    retornando un diccionario vac√≠o en tales casos.
    """
    try:
        # Decodificar el token sin verificar la firma (solo para fines educativos)
        decoded = jwt.decode(token, options={"verify_signature": False})
        return decoded
    except Exception as e:
        print(f"Error al decodificar el token: {e}")
        return {}
    


def mostrar_menu_principal() -> None:
    """
    Muestra y gestiona el men√∫ principal interactivo del sistema.

    Returns
    -------
    None
        La funci√≥n no retorna valores, solo ejecuta un bucle interactivo
        hasta que el usuario elige salir.

    Notes
    -----
    - La funci√≥n utiliza un bucle infinito hasta que el usuario selecciona
    la opci√≥n de salir (5).
    - Depende de las funciones externas: login(), signup(), 
    entrar_como_invitado(), logout() y mostrar_menu_por_rol().
    - Utiliza la variable global ROL para determinar el rol del usuario tras
    el inicio de sesi√≥n.
    - Las opciones v√°lidas son cadenas de texto del "1" al "5".
    """
    
    global ROL
    
    while True:
        print("\nüè† --- Men√∫ Principal --- üè†")
        print("1. üîê Iniciar sesi√≥n")
        print("2. üìù Registrarse")
        print("3. üë§ Entrar como invitado")
        print("4. üîö Cerrar sesi√≥n")
        print("5. üö™ Salir")
        
        opcion = input("üëâ Selecciona una opci√≥n (1-5): ").strip()

        if opcion == "1":
            if ROL:
                print("‚ùå Ya has iniciado sesi√≥n. Cierra sesi√≥n antes de volver a hacerlo.")
            else:
                login()
                if ROL:
                    mostrar_menu_por_rol(ROL)
        elif opcion == "2":
            signup()
        elif opcion == "3":
            entrar_como_invitado()
        elif opcion == "4":
            if not ROL:
                print("‚ùå No has iniciado sesi√≥n a√∫n.")
            else:
                logout()
        elif opcion == "5":
            print("üëã Saliendo del sistema. ¬°Hasta pronto!")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, elige una opci√≥n entre 1 y 5.")



def menu_admin() -> None:
    """
    Muestra y gestiona el men√∫ interactivo para administradores.

    Returns
    -------
    None
        La funci√≥n no retorna valores, ejecuta un bucle interactivo hasta
        que el usuario elige volver al men√∫ principal (opci√≥n 9).

    Notes
    -----
    - La funci√≥n presenta un bucle infinito hasta que se selecciona la opci√≥n
    de salida (9).
    - Depende de las funciones externas: registrar_coche(), eliminar_coche(),
    listar_usuarios(), detalles_usuario(), actualizar_coche(),
    listar_alquileres(), alquiler_detalles() y finalizar_alquiler().
    - Las opciones v√°lidas son cadenas de texto del "1" al "9".
    - Dise√±ada para usuarios con privilegios administrativos. 
    """
    print("\nüîê --- Men√∫ de Administrador --- üîê")
    print("üü¢ Bienvenido, Administrador.")
    print("üìå Desde aqu√≠ puedes gestionar usuarios, coches y alquileres.")

    while True:
        print("\n--- Opciones del Administrador ---")
        print("1. üöó Registrar coche")
        print("2. üö´ Eliminar coche")
        print("3. üë• Listar usuarios")
        print("4. üìÑ Obtener detalles de usuario")
        print("5. üõ†Ô∏è Actualizar datos de coche")
        print("6. üìã Listar alquileres")
        print("7. üîç Detalle espec√≠fico de alquiler")
        print("8. ‚úÖ Finalizar alquiler")
        print("9. üö™ Volver al men√∫ principal")
        
        opcion = input("üëâ Selecciona una opci√≥n (1-9): ").strip()

        if opcion == "1":
            registrar_coche()
        elif opcion == "2":
            eliminar_coche()
        elif opcion == "3":
            listar_usuarios()
        elif opcion == "4":
            detalles_usuario()
        elif opcion == "5":
            actualizar_coche()
        elif opcion == "6":
            listar_alquileres()
        elif opcion == "7":
            alquiler_detalles()
        elif opcion == "8":
            finalizar_alquiler()
        elif opcion == "9":
            print("üëã Volviendo al men√∫ principal...")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, elige entre 1 y 9.")


def menu_cliente() -> None:
    """
    Muestra y gestiona el men√∫ interactivo para clientes.

    Returns
    -------
    None
        La funci√≥n no retorna valores, ejecuta un bucle interactivo hasta
        que el usuario elige volver al men√∫ principal (opci√≥n 9).

    Notes
    -----
    - La funci√≥n mantiene un bucle infinito hasta que se selecciona la opci√≥n
    de salida (9).
    - Depende de las funciones externas: alquilar_coche(), 
    ver_historial_alquileres(), buscar_coches_disponibles(), 
    detalles_usuario(), actualizar_contrase√±a(), detalles_coche(), 
    listar_tipos() y listar_precios().
    - Las opciones v√°lidas son cadenas de texto del "1" al "9".
    - Dise√±ada para usuarios con rol de cliente en el sistema. 
    """
    print("\nüõí --- Men√∫ de Cliente --- üõí")
    print("üü¢ Bienvenido, Cliente.")
    print("üìå Desde aqu√≠ puedes gestionar tus alquileres y consultar informaci√≥n.")

    while True:
        print("\n--- Opciones del Cliente ---")
        print("1. üöó Alquilar coche")
        print("2. üìú Ver historial de alquileres")
        print("3. üîç Buscar coches disponibles")
        print("4. üë§ Datos del usuario")
        print("5. üîê Actualizar contrase√±a")
        print("6. üìÑ Detalles de un coche")
        print("7. üìÅ Categor√≠as de coche")
        print("8. üí∞ Categor√≠as de precio")
        print("9. üö™ Volver al men√∫ principal")

        opcion = input("üëâ Selecciona una opci√≥n (1-9): ").strip()

        if opcion == "1":
            alquilar_coche()
        elif opcion == "2":
            ver_historial_alquileres()
        elif opcion == "3":
            buscar_coches_disponibles()
        elif opcion == "4":
            detalles_usuario()
        elif opcion == "5":
            actualizar_contrase√±a()
        elif opcion == "6":
            detalles_coche()
        elif opcion == "7":
            listar_tipos()
        elif opcion == "8":
            listar_precios()
        elif opcion == "9":
            print("üëã Volviendo al men√∫ principal...")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, elige entre 1 y 9.")


def login() -> None:
    """
    Inicia sesi√≥n en el sistema y obtiene un token JWT.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero actualiza las variables globales
        TOKEN y ROL si el inicio de sesi√≥n es exitoso.

    Notes
    -----
    - Modifica las variables globales TOKEN y ROL.
    - Requiere las bibliotecas `requests` y la funci√≥n `decode_token()`.
    - Depende de la constante BASE_URL definida globalmente.
    - Realiza una solicitud POST al endpoint /login con las credenciales
    proporcionadas por el usuario.
    - Maneja diferentes c√≥digos de estado HTTP (200, 400, 401) y excepciones
    de conexi√≥n.
    """
    global TOKEN, ROL
    print("\nüîê --- Iniciar Sesi√≥n --- üîê")
    email = input("üìß Correo electr√≥nico: ").strip()
    contrase√±a = input("üîë Contrase√±a: ").strip()

    # Validar campos obligatorios
    if not email or not contrase√±a:
        print("‚ùå Error: El correo electr√≥nico y la contrase√±a son obligatorios.")
        return

    # Enviar solicitud POST al endpoint /login
    try:
        r = requests.post(
            f"{BASE_URL}/login",
            json={"email": email, "contrase√±a": contrase√±a}
        )

        # Procesar la respuesta
        if r.status_code == 200:
            respuesta = r.json()
            TOKEN = respuesta.get("token")
            claims = decode_token(TOKEN)
            ROL = claims.get("rol")  # Extraer el rol del token

            # Datos a mostrar en tabla
            user_data = [[
                claims.get('nombre', 'N/A'),
                email,
                claims.get('rol', 'N/A'),
                respuesta.get('id_usuario', 'N/A')
            ]]

            headers_table = ["Nombre", "Correo Electr√≥nico", "Rol", "ID Usuario"]

            print("\n‚úÖ ¬°Inicio de sesi√≥n exitoso!")
            print(tabulate(user_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 400:
            error = r.json().get('error', 'No se recibi√≥ mensaje de error.')
            print(f"\n‚ùå Error: {error}")
        elif r.status_code == 401:
            print("\n‚ùå Credenciales inv√°lidas. Int√©ntalo de nuevo.")
        else:
            print(f"\n‚ö†Ô∏è Error inesperado: {r.status_code} - {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")


def signup() -> None:
    """
    Registra un nuevo usuario en el sistema enviando una solicitud al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Solicita al usuario un nombre de usuario y contrase√±a mediante entrada est√°ndar.
    - Realiza una solicitud POST al endpoint /signup con los datos proporcionados.
    - Requiere la biblioteca `requests` y la constante global BASE_URL.
    - Imprime el c√≥digo de estado HTTP y la respuesta JSON del servidor.
    - No maneja expl√≠citamente excepciones de red, lo que podr√≠a mejorarse.
    """
    print("\nüìù --- Registro de Nuevo Usuario --- üìù")

    nombre = input("üë§ Nombre completo: ").strip()
    email = input("üìß Correo electr√≥nico: ").strip()
    contrase√±a = input("üîë Contrase√±a: ").strip()
    
    # Mostrar opciones de tipo de usuario
    print("\nSeleccione el tipo de usuario:")
    print("1. Cliente (por defecto)")
    print("2. Administrador")
    tipo_opcion = input("Ingrese opci√≥n (1 o 2): ").strip()

    # Validar tipo de usuario
    if tipo_opcion == "1":
        tipo_usuario = "cliente"
    elif tipo_opcion == "2":
        tipo_usuario = "admin"
    else:
        print("‚ùå Opci√≥n inv√°lida. Se asignar√° 'cliente' por defecto.")
        tipo_usuario = "cliente"

    # Validar campos obligatorios
    if not nombre or not email or not contrase√±a:
        print("‚ùå Error: Todos los campos son obligatorios.")
        return

    try:
        # Enviar solicitud POST al endpoint /signup
        r = requests.post(
            f"{BASE_URL}/signup",
            json={
                "nombre": nombre,
                "email": email,
                "contrase√±a": contrase√±a,
                "tipo": tipo_usuario
            }
        )

        # Procesar respuesta
        if r.status_code == 201:
            respuesta = r.json()
            user_data = [
                [
                    nombre,
                    email,
                    tipo_usuario.capitalize(),
                    respuesta.get('id_usuario', 'N/A')
                ]
            ]

            headers_table = ["Nombre", "Correo Electr√≥nico", "Rol", "ID Usuario"]

            print("\n‚úÖ ¬°Registro exitoso!")
            print(tabulate(user_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 400:
            error = r.json().get('error', 'No se recibi√≥ mensaje de error.')
            print(f"\n‚ùå Error: {error}")
        else:
            print(f"\n‚ö†Ô∏è Error inesperado: {r.status_code} - {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def mostrar_menu_por_rol(rol: str) -> None:
    """
    Muestra un men√∫ espec√≠fico seg√∫n el rol del usuario.

    Parameters
    ----------
    rol : str
        El rol del usuario, debe ser 'admin' o 'cliente'.

    Returns
    -------
    None
        La funci√≥n no retorna valores, solo ejecuta el men√∫ correspondiente.

    Notes
    -----
    - Llama a `menu_admin()` si el rol es 'admin'.
    - Llama a `menu_cliente()` si el rol es 'cliente'.
    - Muestra un mensaje de error si el rol no es reconocido.
    - El nombre del rol se muestra con la primera letra en may√∫scula.
    """
    if rol == "admin":
        menu_admin()
    elif rol == "cliente":
        menu_cliente()
    else:
        print("Rol no reconocido.")


def entrar_como_invitado() -> None:
    """
    Permite al usuario entrar al sistema como invitado.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero actualiza la variable global ROL

    Notes
    -----
    - Establece la variable global ROL como 'invitado'.
    - No requiere autenticaci√≥n ni credenciales.
    - Dise√±ada para permitir exploraci√≥n b√°sica del sistema sin registro.
    """
    global ROL
    ROL = "invitado"
    print("\nüëã Has entrado como invitado.")
    print("üìå Puedes explorar algunas funcionalidades sin iniciar sesi√≥n.")

    while True:
        print("\n--- Men√∫ de Invitado ---")
        print("1. üöó Alquilar coche")
        print("2. üîç Buscar coches disponibles")
        print("3. üìÑ Obtener detalles de un coche")
        print("4. üìÅ Categor√≠as de coche")
        print("5. üí∞ Categor√≠as de precio")
        print("6. üö™ Volver al men√∫ principal")

        opcion = input("üëâ Selecciona una opci√≥n (1-6): ").strip()

        if opcion == "1":
            alquilar_coche()
        elif opcion == "2":
            buscar_coches_disponibles()
        elif opcion == "3":
            detalles_coche()
        elif opcion == "4":
            listar_tipos()
        elif opcion == "5":
            listar_precios()
        elif opcion == "6":
            print("üëã Volviendo al men√∫ principal...")
            break
        else:
            print("‚ùå Opci√≥n no v√°lida. Por favor, elige entre 1 y 6.")

def registrar_coche() -> None:
    """
    Registra un nuevo coche en el sistema enviando los datos al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Solicita al usuario los detalles del coche mediante entrada est√°ndar.
    - Convierte ciertos campos a tipos espec√≠ficos: precio_diario (float),
    kilometraje (int), cv (int), plazas (int).
    - Establece el campo 'disponible' como True por defecto.
    - Realiza una solicitud POST al endpoint /coches/registrar.
    - Requiere la biblioteca `requests` y la constante global BASE_URL.
    - Maneja excepciones de red e imprime errores si ocurren.
    """
    global TOKEN
    
    if not TOKEN:
        print("‚ùå No has iniciado sesi√≥n. Por favor, inicia sesi√≥n primero.")
        return
    
    print("\nüöó --- Registrar Nuevo Coche --- üöó")
    
    marca = input('Marca: ').strip()
    modelo = input('Modelo: ').strip()
    matricula = input('Matricula: ').strip()
    categoria_tipo = input('Categoria tipo: ').strip()
    categoria_precio = input('Categoria precio: ').strip()
    
    try:
        a√±o = int(input("A√±o (1900 - actual): ").strip())
        if a√±o < 1900 or a√±o > datetime.now().year:
            print("‚ùå El a√±o debe estar entre 1900 y el a√±o actual.")
            return
    except ValueError:
        print("‚ùå El a√±o debe ser un n√∫mero v√°lido.")
        return
    
    try:
        precio_diario = float(input("Precio diario (‚Ç¨): ").strip())
        if precio_diario <= 0:
            print("‚ùå El precio diario debe ser mayor que cero.")
            return
    except ValueError:
        print("‚ùå El precio diario debe ser un n√∫mero v√°lido.")
        return
    
    try:
        kilometraje = float(input("Kilometraje: ").strip())
        if kilometraje < 0:
            print("‚ùå El kilometraje no puede ser negativo.")
            return
    except ValueError:
        print("‚ùå El kilometraje debe ser un n√∫mero v√°lido.")
        return

    color = input("Color: ").strip()
    combustible = input("Combustible (ej. Gasolina, Di√©sel): ").strip()
    
    try:
        cv = int(input("Caballos (CV): ").strip())
        if cv <= 0:
            print("‚ùå Los caballos deben ser un n√∫mero positivo.")
            return
    except ValueError:
        print("‚ùå Los caballos deben ser un n√∫mero v√°lido.")
        return
    
    try:
        plazas = int(input("N√∫mero de plazas: ").strip())
        if plazas <= 0:
            print("‚ùå El n√∫mero de plazas debe ser mayor que cero.")
            return
    except ValueError:
        print("‚ùå El n√∫mero de plazas debe ser un n√∫mero entero.")
        return
    
    disponible_input = input("¬øEst√° disponible? (s/n, por defecto 's'): ").strip().lower()
    disponible = True if disponible_input in ('', 's', 'si', 'yes') else False
    
    # Crear el payload con los datos del coche
    data = {
        'marca': marca,
        'modelo': modelo,
        'matricula': matricula,
        'categoria_tipo': categoria_tipo,
        'categoria_precio': categoria_precio,
        'a√±o': a√±o,
        'precio_diario': precio_diario,
        'kilometraje': kilometraje,
        'color': color,
        'combustible': combustible,
        'cv': cv,
        'plazas': plazas,
        'disponible': disponible
    }

    # Obtener los headers con el token JWT
    headers = get_headers(auth_required=True)

    # Realizar la solicitud POST
    try:
        r = requests.post(f'{BASE_URL}/coches/registrar', json=data, headers=headers)
        if r.status_code == 201:
            respuesta = r.json()
            coche_data = [
                [
                    marca,
                    modelo,
                    matricula,
                    a√±o,
                    f"‚Ç¨{precio_diario:.2f}",
                    categoria_tipo,
                    categoria_precio,
                    "S√≠" if disponible else "No",
                    respuesta.get('id_coche', 'N/A')
                ]
            ]

            headers_table = [
                "Marca", "Modelo", "Matr√≠cula", "A√±o", "Precio", 
                "Tipo", "Categor√≠a", "Disponible", "ID Coche"
            ]

            print("\n‚úÖ ¬°Coche registrado exitosamente!")
            print(tabulate(coche_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 400:
            error = r.json().get('error', 'Error desconocido.')
            print(f"\n‚ùå Error: {error}")
        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado. Solo los administradores pueden registrar coches.")
        else:
            print(f"\n‚ö†Ô∏è Error inesperado: {r.status_code} - {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")


def eliminar_coche() -> None:
    """
    Elimina un coche del sistema enviando una solicitud al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Solicita al usuario el ID del coche a eliminar mediante entrada est√°ndar.
    - Realiza una solicitud DELETE al endpoint /coches/eliminar/{id_coche}.
    - Requiere la biblioteca `requests`, las variables globales BASE_URL y TOKEN,
    y la funci√≥n get_headers para generar los encabezados con autenticaci√≥n.
    - Maneja excepciones de red e imprime errores si ocurren.
    """
    global TOKEN  # Acceder a la variable global TOKEN

    # Verificar si hay un token JWT v√°lido
    if not TOKEN:
        print("‚ùå No has iniciado sesi√≥n. Por favor, inicia sesi√≥n primero.")
        return

    # Solicitar el ID del coche a eliminar
    print("\nüóëÔ∏è --- Eliminar Coche --- üóëÔ∏è")
    id_input = input('üÜî Introduce el ID del coche a eliminar: ').strip()

    # Validaci√≥n del ID
    try:
        id_coche = int(id_input)
        if id_coche <= 0:
            print("‚ùå Error: El ID debe ser un n√∫mero entero positivo.")
            return
    except ValueError:
        print("‚ùå Error: El ID debe ser un n√∫mero v√°lido.")
        return

    # Obtener los headers con el token JWT
    headers = get_headers(auth_required=True)

    # Realizar la solicitud DELETE
    try:
        r = requests.delete(
            f'{BASE_URL}/coches/eliminar/{id_coche}',
            headers=headers  # Incluir los headers con el token JWT
        )
        if r.status_code == 200:
            data = [[f"ID {id_coche}", "‚úÖ Eliminado", "‚úîÔ∏è S√≠"]]
            headers_table = ["Coche", "Estado", "Acci√≥n"]
            print("\n‚úÖ ¬°Eliminaci√≥n exitosa!")
            print(tabulate(data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 404:
            error = r.json().get('error', 'Coche no encontrado')
            print(f"\n‚ùå Error ({r.status_code}): {error}")
        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado. Solo los administradores pueden eliminar coches.")
        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")


def buscar_coches_disponibles() -> None:
    """
    Busca coches disponibles en el sistema seg√∫n criterios especificados.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Solicita al usuario criterios de b√∫squeda (categor√≠a de precio, tipo,
    marca y modelo) mediante entrada est√°ndar.
    - Realiza una solicitud GET al endpoint /coches-disponibles con los
    par√°metros como query parameters en la URL.
    - Requiere la biblioteca requests y la constante global BASE_URL.
    - Maneja excepciones de red e imprime errores si ocurren.
    """
    # Solicitar los criterios de b√∫squeda al usuario
    print("\nüîç --- Buscar Coches Disponibles --- üîç")

    categoria_precio = input('Categor√≠a de precio (obligatoria): ').strip()
    categoria_tipo = input('Categor√≠a de tipo (opcional): ').strip()
    marca = input('Marca (opcional): ').strip()
    modelo = input('Modelo (opcional): ').strip()

    if not categoria_precio:
        print("‚ùå Error: La categor√≠a de precio es obligatoria.")
        return

    try:
        params = {
            'categoria_precio': categoria_precio or None,
            'categoria_tipo': categoria_tipo or None,
            'marca': marca or None,
            'modelo': modelo or None
        }

        # Eliminar par√°metros vac√≠os
        params = {k: v for k, v in params.items() if v is not None}

        r = requests.get(f'{BASE_URL}/coches-disponibles', params=params)

        if r.status_code == 200:
            try:
                datos = r.json()

                # Mostrar resultados dependiendo de la estructura devuelta
                if 'detalles' in datos:
                    coches = datos['detalles']
                    if not coches:
                        print("\nüö´ No se encontraron coches con esos criterios.")
                        return

                    headers = {
                        "matricula": "Matr√≠cula",
                        "marca": "Marca",
                        "modelo": "Modelo",
                        "categoria_precio": "Precio",
                        "categoria_tipo": "Tipo",
                        "a√±o": "A√±o",
                        "precio_diario": "Precio Diario",
                        "disponible": "Disponible"
                    }

                    table_data = [[c.get(k) for k in headers.keys()] for c in coches]
                    print("\nüöó Resultados de b√∫squeda:")
                    print(tabulate(table_data, headers=headers.values(), tablefmt="rounded_grid"))

                elif 'categorias_tipo' in datos:
                    categorias = datos['categorias_tipo']
                    print("\nüìÅ Categor√≠as de tipo disponibles:")
                    for cat in categorias:
                        print(f" - {cat}")

                elif 'marcas' in datos:
                    marcas = datos['marcas']
                    print("\nüè≠ Marcas disponibles:")
                    for m in marcas:
                        print(f" - {m}")

                elif 'modelos' in datos:
                    modelos = datos['modelos']
                    print("\nüõª Modelos disponibles:")
                    for mod in modelos:
                        print(f" - {mod}")

            except ValueError:
                print("‚ùå Error al procesar los datos recibidos del servidor.")
        elif r.status_code == 400:
            error = r.json().get('error', 'Solicitud incorrecta.')
            print(f"\n‚ùå Error ({r.status_code}): {error}")
        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")


def eliminar_usuario() -> None:
    """
    Elimina un usuario del sistema enviando una solicitud al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Solicita el correo electr√≥nico del usuario a eliminar mediante entrada est√°ndar.
    - Realiza una solicitud DELETE al endpoint /usuarios/eliminar con el email como
    par√°metro de consulta.
    - Utiliza `get_headers()` para incluir autenticaci√≥n en los headers si es necesario.
    - Requiere la biblioteca `requests` y la constante global BASE_URL.
    - Maneja excepciones de red e imprime errores si ocurren.
    """
    global TOKEN

    if not TOKEN:
        print("‚ùå No has iniciado sesi√≥n. Por favor, inicia sesi√≥n primero.")
        return

    print("\nüóëÔ∏è --- Eliminar Usuario --- üóëÔ∏è")
    email = input("üìß Correo electr√≥nico del usuario a eliminar: ").strip()
    
    headers = get_headers(auth_required=True)
    
    try:
        
        r = requests.delete(
            f"{BASE_URL}/usuarios/eliminar",
            params={"email": email},
            headers=headers
        )
        if r.status_code == 200:
            respuesta = r.json()
            usuario = respuesta.get("usuario", {})
            user_data = [[
                usuario.get("nombre", "N/A"),
                email,
                usuario.get("tipo", "N/A"),
                usuario.get("id_usuario", "N/A")]]
            headers_table = ["Nombre", "Correo Electr√≥nico", "Rol", "ID Usuario"]

            print("\n‚úÖ ¬°Usuario eliminado exitosamente!")
            print(tabulate(user_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 400:
            error = r.json().get('error', 'El correo no es v√°lido.')
            print(f"\n‚ùå Error ({r.status_code}): {error}")

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: Solo los administradores pueden eliminar usuarios.")

        elif r.status_code == 404:
            error = r.json().get('error', 'Usuario no encontrado.')
            print(f"\nüîç No se encontr√≥ ning√∫n usuario con el correo: {email}")
            
        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")


def listar_usuarios() -> None:
    """
    Lista todos los usuarios registrados en el sistema mediante una solicitud al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Realiza una solicitud GET al endpoint /listar-usuarios.
    - Utiliza `get_headers()` con autenticaci√≥n requerida para incluir el token en los headers.
    - Requiere la biblioteca `requests` y la constante global BASE_URL.
    - Maneja excepciones de red e imprime errores si ocurren.
    - Se asume que el endpoint retorna una lista de usuarios en formato JSON.
    """
    global TOKEN

    if not TOKEN:
        print("‚ùå No has iniciado sesi√≥n. Por favor, inicia sesi√≥n primero.")
        return

    print("\nüë• --- Listado de Usuarios --- üë§")
    
    try:
        r = requests.get(
            f"{BASE_URL}/listar-usuarios",
            headers=get_headers(auth_required=True)
        )
        if r.status_code == 200:
            datos = r.json()
            usuarios = datos.get('usuarios', [])

            if not usuarios:
                print("\nüö´ No hay usuarios registrados en el sistema.")
                return

            # Mostrar usuarios en tabla
            headers_table = {
                'id_usuarios': 'ID',
                'nombre': 'Nombre',
                'tipo': 'Rol',
                'email': 'Correo Electr√≥nico'
            }

            table_data = [[usuario[k] for k in headers_table.keys()] for usuario in usuarios]

            print("\nüìã Usuarios registrados:")
            print(tabulate(table_data, headers=headers_table.values(), tablefmt="rounded_grid"))

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: Solo los administradores pueden ver este contenido.")

        elif r.status_code == 404:
            print("\nüîç No se encontraron usuarios registrados.")

        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def detalles_usuario() -> None:
    """
    Obtiene los detalles de un usuario espec√≠fico enviando una solicitud al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Solicita el correo electr√≥nico del usuario mediante entrada est√°ndar.
    - Realiza una solicitud GET al endpoint /usuarios/detalles/{email}.
    - Utiliza `get_headers()` con autenticaci√≥n requerida para incluir el token en los headers.
    - Requiere la biblioteca `requests` y la constante global BASE_URL.
    - Maneja excepciones de red e imprime errores si ocurren.
    - Se asume que el endpoint retorna los detalles del usuario en formato JSON.
    """
    
    global TOKEN

    if not TOKEN:
        print("‚ùå No has iniciado sesi√≥n. Por favor, inicia sesi√≥n primero.")
        return

    print("\nüìÑ --- Detalles del Usuario --- üìÑ")
    email = input("üìß Correo del usuario: ").strip()
    
    try:
        r = requests.get(
            f"{BASE_URL}/usuarios/detalles/{email}",
            headers=get_headers(auth_required=True)
        )
        if r.status_code == 200:
            datos = r.json()
            usuario = datos.get('usuario', {})

            # Preparar los datos para mostrarlos en tabla
            table_data = [[
                usuario.get('id_usuario', 'N/A'),
                usuario.get('nombre', 'N/A'),
                usuario.get('email', 'N/A'),
                usuario.get('tipo', 'N/A')
            ]]

            headers_table = ['ID', 'Nombre', 'Email', 'Rol']

            print("\n‚úÖ Detalles del usuario:")
            print(tabulate(table_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: No tienes permiso para ver estos detalles.")

        elif r.status_code == 404:
            print(f"\nüîç No se encontr√≥ ning√∫n usuario con el correo: {email}")

        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def actualizar_contrase√±a() -> None:
    """
    Actualiza la contrase√±a de un usuario enviando una solicitud al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Solicita la nueva contrase√±a y el correo electr√≥nico del usuario mediante entrada est√°ndar.
    - Realiza una solicitud PUT al endpoint /usuarios/actualizar-contrase√±a/{email}.
    - Env√≠a la nueva contrase√±a en el cuerpo JSON.
    - Utiliza `get_headers()` con autenticaci√≥n requerida para incluir el token en los headers.
    - Requiere la biblioteca `requests` y la constante global BASE_URL.
    - Maneja excepciones de red e imprime errores si ocurren.
    """
    print("\nüîê --- Actualizar Contrase√±a --- üîê")

    email = input("üìß Correo electr√≥nico: ").strip()
    nueva_contrase√±a = input("üîë Nueva contrase√±a: ").strip()
    confirmacion = input("üîÅ Confirmar nueva contrase√±a: ").strip()
    
    if nueva_contrase√±a != confirmacion:
        print("‚ùå Error: Las contrase√±as no coinciden.")
        return
    
    try:
        r = requests.put(
            f"{BASE_URL}/usuarios/actualizar-contrase√±a/{email}",
            json={"nueva_contrase√±a": nueva_contrase√±a},
            headers=get_headers(auth_required=True)
        )
        if r.status_code == 200:
            print("\n‚úÖ ¬°Contrase√±a actualizada exitosamente!")
            print("üîì Puedes iniciar sesi√≥n con tu nueva contrase√±a.")

        elif r.status_code == 400:
            error = r.json().get('error', 'No se pudo actualizar la contrase√±a.')
            print(f"\n‚ùå Error ({r.status_code}): {error}")

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: Solo puedes cambiar tu propia contrase√±a.")

        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def logout() -> None:
    """
    Cierra la sesi√≥n del usuario enviando una solicitud al servidor.

    Returns
    -------
    None
        La funci√≥n no retorna valores, pero imprime la respuesta del servidor.

    Notes
    -----
    - Realiza una solicitud POST al endpoint /logout.
    - Utiliza `get_headers()` con autenticaci√≥n requerida para incluir el token en los headers.
    - Requiere la biblioteca `requests` y la constante global BASE_URL.
    - Maneja excepciones de red e imprime errores si ocurren.
    - Se asume que el servidor invalida el token tras esta solicitud.
    """
    global TOKEN, ROL
    
    try:
        r = requests.post(
            f"{BASE_URL}/logout",
            headers=get_headers(auth_required=True)
        )
        if r.status_code == 200:
            # Limpiar variables globales
            TOKEN = None
            ROL = None

            print("\nüëã Sesi√≥n cerrada exitosamente.")
            print("üîì Ahora puedes iniciar sesi√≥n con otro usuario o salir del sistema.")

        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def detalles_coche() -> None:
    """
    Consulta y muestra los detalles de un coche utilizando su matr√≠cula.

    Esta funci√≥n solicita al usuario la matr√≠cula de un coche, realiza una petici√≥n GET a una API 
    para obtener los detalles del coche correspondiente y muestra la respuesta. Si ocurre un error 
    de conexi√≥n durante la solicitud, se captura la excepci√≥n y se muestra un mensaje de error.

    La URL de la API se construye utilizando la variable global `BASE_URL` y los encabezados necesarios 
    se obtienen mediante la funci√≥n `get_headers()`.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.

    Notes
    -----
    - Se utiliza el m√©todo `strip()` para eliminar espacios en blanco innecesarios en la entrada de la matr√≠cula.
    - La funci√≥n imprime directamente la respuesta o el mensaje de error en lugar de devolver valores.
    """
    print("\nüìÑ --- Detalles del Coche --- üìÑ")
    matricula = input("üî§ Matr√≠cula del coche: ").strip()

    if not matricula:
        print("‚ùå Error: La matr√≠cula es obligatoria.")
        return
    
    try:
        r: requests.Response = requests.get(
            f"{BASE_URL}/coches/detalles/{matricula}", headers=get_headers()
        )
        if r.status_code == 200:
            datos = r.json()
            coche = datos.get('coche', {})

            # Mostrar detalles del coche en tabla bonita
            table_data = [[
                coche.get('id', 'N/A'),
                coche.get('marca', 'N/A'),
                coche.get('modelo', 'N/A'),
                coche.get('matricula', 'N/A'),
                coche.get('categoria_tipo', 'N/A'),
                coche.get('categoria_precio', 'N/A'),
                coche.get('a√±o', 'N/A'),
                f"‚Ç¨{float(coche.get('precio_diario', 0)):.2f}",
                coche.get('kilometraje', 'N/A'),
                coche.get('color', 'N/A'),
                coche.get('combustible', 'N/A'),
                coche.get('cv', 'N/A'),
                coche.get('plazas', 'N/A'),
                "‚úÖ S√≠" if coche.get('disponible', False) else "‚ùå No"
            ]]

            headers_table = [
                "ID", "Marca", "Modelo", "Matr√≠cula",
                "Tipo", "Categor√≠a Precio", "A√±o",
                "Precio Diario", "Kilometraje", "Color",
                "Combustible", "CV", "Plazas", "Disponible"
            ]

            print("\n‚úÖ Detalles del coche:")
            print(tabulate(table_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 404:
            print(f"\nüîç No se encontr√≥ ning√∫n coche con la matr√≠cula '{matricula}'.")
        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def actualizar_coche() -> None:
    """
    Actualiza la matr√≠cula de un coche identificado por su ID.

    Esta funci√≥n solicita al usuario el ID del coche y la nueva matr√≠cula, realiza una petici√≥n PUT 
    a una API para actualizar la matr√≠cula del coche correspondiente y muestra la respuesta. Si ocurre 
    un error de conexi√≥n durante la solicitud, se captura la excepci√≥n y se muestra un mensaje de error.

    La URL de la API se construye utilizando la variable global `BASE_URL`, y los encabezados necesarios 
    se obtienen mediante la funci√≥n `get_headers()` con el par√°metro `auth_required=True`.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.

    Notes
    -----
    - Se utiliza el m√©todo `strip()` para eliminar espacios en blanco innecesarios en las entradas del ID y la nueva matr√≠cula.
    - La funci√≥n imprime directamente la respuesta o el mensaje de error en lugar de devolver valores.
    - El cuerpo de la solicitud contiene un objeto JSON con la clave `"nueva_matricula"` y el valor proporcionado por el usuario.
    """
    
    print("\nüõ†Ô∏è --- Actualizar Matr√≠cula de Coche --- üõ†Ô∏è")

    id_coche = input("üÜî ID del coche a actualizar: ").strip()
    nueva_matricula = input("üî§ Nueva matr√≠cula: ").strip()
    
    if not id_coche:
        print("‚ùå Error: El ID del coche es obligatorio.")
        return

    if not nueva_matricula:
        print("‚ùå Error: La nueva matr√≠cula es obligatoria.")
        return
    
    headers = get_headers(auth_required=True)
    
    try:
        r: requests.Response = requests.put(
            f"{BASE_URL}/coches/actualizar-matricula/{id_coche}",
            json={"nueva_matricula": nueva_matricula},
            headers=headers
        )
        if r.status_code == 200:
            print("\n‚úÖ ¬°Matr√≠cula actualizada exitosamente!")

            # Mostrar detalles de la actualizaci√≥n en formato tabla
            data_table = [[
                id_coche,
                nueva_matricula,
                "‚úÖ √âxito"
            ]]
            headers_table = ["ID Coche", "Nueva Matr√≠cula", "Estado"]

            print(tabulate(data_table, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 400:
            error = r.json().get('error', 'No se pudo procesar la solicitud.')
            print(f"\n‚ùå Error ({r.status_code}): {error}")

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: Solo los administradores pueden realizar esta acci√≥n.")

        elif r.status_code == 404:
            error = r.json().get('error', 'Coche no encontrado.')
            print(f"\nüîç Error ({r.status_code}): {error}")

        else:
            print(f"\n‚ö†Ô∏è Error inesperado ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def listar_alquileres() -> None:
    """
    Lista todos los alquileres disponibles realizando una solicitud GET a la API.

    Esta funci√≥n realiza una petici√≥n GET a una API para obtener una lista de todos los alquileres 
    registrados. La URL de la API se construye utilizando la variable global `BASE_URL`, y los encabezados 
    necesarios se obtienen mediante la funci√≥n `get_headers()` con el par√°metro `auth_required=True`.

    Si la solicitud es exitosa, se imprime la respuesta de la API, que incluye el c√≥digo de estado HTTP 
    y los datos en formato JSON. Si ocurre un error de conexi√≥n durante la solicitud, se captura la excepci√≥n 
    y se muestra un mensaje de error.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.

    Notes
    -----
    - La funci√≥n imprime directamente la respuesta o el mensaje de error en lugar de devolver valores.
    - Se requiere autenticaci√≥n para acceder a este endpoint, por lo que se utiliza `auth_required=True` 
    en la funci√≥n `get_headers()`.
    """
    print("\nüìã --- Listado de Alquileres --- üìã")
    headers = get_headers(auth_required=True)
    
    
    try:
        r: requests.Response = requests.get(
            f"{BASE_URL}/alquileres/listar", headers=headers)
        if r.status_code == 200:
            datos = r.json()
            alquileres = datos.get('alquileres', [])

            if not alquileres:
                print("\nüö´ No hay alquileres registrados.")
                return

            # Preparar encabezados y datos para mostrar
            headers_table = {
                'id_alquiler': 'ID',
                'id_usuario': 'ID Usuario',
                'id_coche': 'ID Coche',
                'matricula': 'Matr√≠cula',
                'fecha_inicio': 'Inicio',
                'fecha_fin': 'Fin',
                'coste_total': 'Precio Total',
                'activo': 'Activo'
            }

            table_data = [[a[k] for k in headers_table.keys()] for a in alquileres]

            print("\nüì¶ Alquileres encontrados:")
            print(tabulate(table_data, headers=headers_table.values(), tablefmt="rounded_grid"))

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: Solo los administradores pueden ver los alquileres.")

        elif r.status_code == 404:
            print("\nüîç No se encontraron alquileres registrados.")

        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def alquiler_detalles() -> None:
    """
    Obtiene y muestra los detalles de un alquiler espec√≠fico utilizando su ID.

    Esta funci√≥n solicita al usuario el ID de un alquiler, realiza una petici√≥n GET a una API 
    para obtener los detalles del alquiler correspondiente y muestra la respuesta. Si ocurre un error 
    de conexi√≥n durante la solicitud, se captura la excepci√≥n y se muestra un mensaje de error.

    La URL de la API se construye utilizando la variable global `BASE_URL`, y los encabezados necesarios 
    se obtienen mediante la funci√≥n `get_headers()` con el par√°metro `auth_required=True`.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.

    Notes
    -----
    - Se utiliza el m√©todo `strip()` para eliminar espacios en blanco innecesarios en la entrada del ID.
    - La funci√≥n imprime directamente la respuesta o el mensaje de error en lugar de devolver valores.
    - Se requiere autenticaci√≥n para acceder a este endpoint, por lo que se utiliza `auth_required=True` 
    en la funci√≥n `get_headers()`.
    """
    
    print("\nüìÑ --- Detalles del Alquiler --- üìÑ")
    id_alquiler = input("üÜî ID del alquiler: ").strip()
    
    headers = get_headers(auth_required=True)
    
    try:
        r: requests.Response = requests.get(
            f"{BASE_URL}/alquileres/detalles/{id_alquiler}", headers=headers)
        if r.status_code == 200:
            datos = r.json()
            alquiler = datos.get('alquiler', {})

            # Datos del alquiler formateados para mostrar
            table_data = [[
                alquiler.get('id_alquiler', 'N/A'),
                alquiler.get('id_coche', 'N/A'),
                alquiler.get('id_usuario', 'N/A'),
                alquiler.get('fecha_inicio', 'N/A'),
                alquiler.get('fecha_fin', 'N/A'),
                f"‚Ç¨{alquiler.get('coste_total', 0):.2f}",
                "‚úÖ S√≠" if alquiler.get('activo', False) else "‚ùå No"
            ]]

            headers_table = ["ID Alquiler", "ID Coche", "ID Usuario", "Fecha Inicio", "Fecha Fin", "Coste Total", "Activo"]

            print("\n‚úÖ Detalles del alquiler:")
            print(tabulate(table_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: No tienes permiso para ver este alquiler.")

        elif r.status_code == 404:
            print(f"\nüîç No se encontr√≥ ning√∫n alquiler con el ID '{id_alquiler}'.")

        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def finalizar_alquiler() -> None:
    """
    Finaliza un alquiler espec√≠fico identificado por su ID.

    Esta funci√≥n solicita al usuario el ID del alquiler que se desea finalizar, realiza una petici√≥n PUT 
    a una API para marcar el alquiler como finalizado y muestra la respuesta. Si ocurre un error de conexi√≥n 
    durante la solicitud, se captura la excepci√≥n y se muestra un mensaje de error.

    La URL de la API se construye utilizando la variable global `BASE_URL`, y los encabezados necesarios 
    se obtienen mediante la funci√≥n `get_headers()` con el par√°metro `auth_required=True`.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.

    Notes
    -----
    - Se utiliza el m√©todo `strip()` para eliminar espacios en blanco innecesarios en la entrada del ID.
    - La funci√≥n imprime directamente la respuesta o el mensaje de error en lugar de devolver valores.
    - Se requiere autenticaci√≥n para acceder a este endpoint, por lo que se utiliza `auth_required=True` 
    en la funci√≥n `get_headers()`.
    """
    
    print("\n‚úÖ --- Finalizar Alquiler --- ‚úÖ")
    id_alquiler = input("üÜî ID del alquiler a finalizar: ").strip()
    
    if not id_alquiler:
        print("‚ùå Error: El ID del alquiler es obligatorio.")
        return
    
    
    headers = get_headers(auth_required=True)

    try:
        id_alquiler: str = input("üÜî ID del alquiler a finalizar: ").strip()
        r: requests.Response = requests.put(
            f"{BASE_URL}/alquileres/finalizar/{id_alquiler}", headers=headers)
        if r.status_code == 200:
            respuesta = r.json()
            alquiler = respuesta.get('mensaje', '')
            id_coche = respuesta.get('id_coche', 'N/A')

            # Mostrar confirmaci√≥n bonita con tabla
            table_data = [[
                id_alquiler,
                id_coche,
                "‚úÖ S√≠"
            ]]

            headers_table = ["ID Alquiler", "ID Coche", "Finalizado"]

            print("\nüéâ ¬°Alquiler finalizado exitosamente!")
            print(tabulate(table_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 400:
            error = r.json().get('error', 'No se pudo finalizar el alquiler.')
            print(f"\n‚ùå Error ({r.status_code}): {error}")

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: No tienes permiso para finalizar este alquiler.")

        elif r.status_code == 404:
            print(f"\nüîç No se encontr√≥ ning√∫n alquiler con el ID '{id_alquiler}'.")

        else:
            print(f"\n‚ö†Ô∏è Error inesperado ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")


def ver_historial_alquileres() -> None:
    """
    Muestra el historial de alquileres de un usuario identificado por su email.

    Esta funci√≥n solicita al usuario el email asociado a los alquileres que desea consultar, 
    realiza una petici√≥n GET a una API para obtener el historial de alquileres correspondiente 
    y muestra la respuesta. Si ocurre un error de conexi√≥n durante la solicitud, se captura la 
    excepci√≥n y se muestra un mensaje de error.

    La URL de la API se construye utilizando la variable global `BASE_URL`. El email se incluye 
    como parte de la URL del endpoint.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.

    Notes
    -----
    - La funci√≥n imprime directamente la respuesta o el mensaje de error en lugar de devolver valores.
    """
    global TOKEN  # Acceder a la variable global TOKEN

    # Verificar si hay un token JWT v√°lido
    if not TOKEN:
        print("‚ùå No has iniciado sesi√≥n. Por favor, inicia sesi√≥n primero.")
        return

    print("\nüì¶ --- Historial de Alquileres --- üì¶")
    email = input("üìß Email del usuario: ").strip()

    # Validar que el email no est√© vac√≠o
    if not email:
        print("‚ùå Error: El email es obligatorio.")
        return

    # Obtener los headers con el token JWT
    headers = get_headers(auth_required=True)

    # Realizar la solicitud GET
    try:
        r = requests.get(
            f'{BASE_URL}/alquileres/historial/{email}',  # Incluir el email en la URL
            headers=headers  # Incluir los headers con el token JWT
        )
        if r.status_code == 200:
            datos = r.json()
            alquileres = datos.get('alquileres', [])

            if not alquileres:
                print(f"\nüö´ No se encontr√≥ historial de alquileres para '{email}'.")
                return

            # Mostrar datos en formato tabla
            headers_table = [
                "ID Alquiler", "ID Coche", "Matr√≠cula", 
                "Fecha Inicio", "Fecha Fin", "Coste Total", "Activo"
            ]

            table_data = [[
                a.get('id_alquiler', 'N/A'),
                a.get('id_coche', 'N/A'),
                a.get('matricula', 'N/A'),
                a.get('fecha_inicio', 'N/A'),
                a.get('fecha_fin', 'N/A'),
                f"‚Ç¨{a.get('coste_total', 0):.2f}",
                "‚úÖ S√≠" if a.get('activo') else "‚ùå No"
            ] for a in alquileres]

            print(f"\nüìÖ Historial de alquileres para {email}:")
            print(tabulate(table_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: No tienes permiso para ver este historial.")

        elif r.status_code == 404:
            error = r.json().get('error', 'Usuario no encontrado.')
            print(f"\nüîç No se encontr√≥ ning√∫n historial de alquileres para '{email}'.")
            print(f"Mensaje del servidor: {error}")

        elif r.status_code == 500:
            print("\nüö® Error interno del servidor:")
            print("‚ö†Ô∏è Hubo un fallo en el servidor. Int√©ntalo m√°s tarde.")
            print("üì¢ Si eres administrador, revisa los logs del servidor.")

        else:
            print(f"\n‚ö†Ô∏è Error inesperado ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def alquilar_coche() -> None:
    """
    Permite al usuario alquilar un coche y descargar la factura en formato PDF.

    Esta funci√≥n solicita al usuario la matr√≠cula del coche, las fechas de inicio y fin del alquiler, 
    y el email del usuario (opcional). Luego, env√≠a una solicitud POST a una API para registrar el alquiler. 
    Si la solicitud es exitosa (c√≥digo de estado 200), se descarga un archivo PDF con la factura del alquiler 
    utilizando un cuadro de di√°logo para elegir la ubicaci√≥n de guardado.

    La URL de la API se construye utilizando la variable global `BASE_URL`. Los datos del alquiler se env√≠an 
    en formato JSON en el cuerpo de la solicitud.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.

    Notes
    -----
    - Se utiliza el m√©todo `strip()` para eliminar espacios en blanco innecesarios en las entradas del usuario.
    - Si el campo de email se deja en blanco, se asume que el usuario es un invitado y no se incluye el email en la solicitud.
    - Para guardar el archivo PDF, se utiliza el m√≥dulo `tkinter.filedialog`, que abre un cuadro de di√°logo gr√°fico.
    - La funci√≥n imprime mensajes informativos sobre el resultado de la operaci√≥n.
    """
    print("\nüöó --- Alquilar Coche --- üöó")
    matricula = input("üî§ Matr√≠cula del coche: ").strip()
    fecha_inicio = input("üìÖ Fecha de inicio (YYYY-MM-DD): ").strip()
    fecha_fin = input("üìÜ Fecha de fin (YYYY-MM-DD): ").strip()
    email = input("üìß Email del usuario (dejar en blanco para invitado): ").strip() or None

    # Preparar los datos para la solicitud
    data: dict[str, str | None] = {
        "matricula": matricula,
        "fecha_inicio": fecha_inicio,
        "fecha_fin": fecha_fin,
    }
    if email:
        data["email"] = email

    try:
        # Enviar la solicitud POST al endpoint /alquilar-coche
        r: requests.Response = requests.post(f"{BASE_URL}/alquilar-coche", json=data)

        # Procesar la respuesta
        if r.status_code == 200:
            # Guardar el archivo PDF recibido
            root = tk.Tk()
            root.withdraw()  # Ocultar la ventana principal

            # Abrir un cuadro de di√°logo para elegir la ubicaci√≥n
            ruta_guardado = filedialog.asksaveasfilename(
                defaultextension=".pdf",
                filetypes=[("PDF Files", "*.pdf")],
                initialdir="~/Downloads",
                title="Guardar factura PDF",
                initialfile="factura.pdf"
            )

            if ruta_guardado:
                with open(ruta_guardado, "wb") as f:
                    f.write(r.content)
                print("‚úÖFactura descargada exitosamente.")
                print("\nüéâ ¬°Alquiler realizado exitosamente!")
            else:
                print("üö´ Descarga cancelada por el usuario.")
        elif r.status_code == 200 and 'application/json' in r.headers.get('Content-Type', ''):
            # Si el servidor responde con JSON en lugar de PDF (por ejemplo, error o info)
            respuesta = r.json()
            error = respuesta.get('error')
            if error:
                print(f"\n‚ùå Error del servidor: {error}")
            else:
                print(f"\nüì¶ Respuesta del servidor: {respuesta}")

        elif r.status_code == 400:
            error = r.json().get('error', 'Datos incorrectos.')
            print(f"\n‚ùå Error ({r.status_code}): {error}")

        elif r.status_code == 403:
            print("\n‚ùå Acceso denegado: Los administradores no pueden alquilar coches.")

        else:
            print(f"\n‚ö†Ô∏è Error inesperado ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")


def listar_tipos() -> None:
    """
    Lista los tipos de categor√≠as de coches disponibles realizando una solicitud GET a la API.

    Esta funci√≥n realiza una petici√≥n GET a una API para obtener una lista de los tipos de categor√≠as 
    de coches registrados. La URL de la API se construye utilizando la variable global `BASE_URL`.

    Si la solicitud es exitosa, se imprime la respuesta de la API, que incluye el c√≥digo de estado HTTP 
    y los datos en formato JSON. Si ocurre un error de conexi√≥n durante la solicitud, se captura la excepci√≥n 
    y se muestra un mensaje de error.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.
    """
    
    print("\nüìÅ --- Categor√≠as de Tipo de Coche --- üìÅ")
    
    try:
        r: requests.Response = requests.get(f"{BASE_URL}/coches/categorias/tipo")
        if r.status_code == 200:
            datos = r.json()
            categorias = datos.get("categorias_tipo", [])

            if not categorias:
                print("\nüö´ No hay categor√≠as de tipo disponibles.")
                return

            # Mostrar las categor√≠as en formato tabla
            table_data = [[idx + 1, categoria] for idx, categoria in enumerate(categorias)]
            headers_table = ["#", "Categor√≠a de Tipo"]

            print("\nüî¢ Categor√≠as disponibles:")
            print(tabulate(table_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 404:
            print(f"\nüîç No se encontraron categor√≠as de tipo: {r.json().get('error', 'No hay categor√≠as disponibles')}")
        else:
            print(f"\n‚ö†Ô∏è Error ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")
        print("Error de conexi√≥n:", e)

def listar_precios() -> None:
    """
    Lista los precios de las categor√≠as de coches disponibles realizando una solicitud GET a la API.

    Esta funci√≥n realiza una petici√≥n GET a una API para obtener una lista de los precios asociados 
    a las categor√≠as de coches registradas. La URL de la API se construye utilizando la variable global `BASE_URL`.

    Si la solicitud es exitosa, se imprime la respuesta de la API, que incluye el c√≥digo de estado HTTP 
    y los datos en formato JSON. Si ocurre un error de conexi√≥n durante la solicitud, se captura la excepci√≥n 
    y se muestra un mensaje de error.

    Raises
    ------
    requests.exceptions.RequestException
        Si ocurre un error durante la solicitud HTTP (por ejemplo, problemas de conexi√≥n, 
        timeout, o errores de red), se captura la excepci√≥n y se imprime un mensaje de error.
    """
    
    print("\nüí∞ --- Categor√≠as de Precio --- üí∞")
    
    try:
        r: requests.Response = requests.get(f"{BASE_URL}/coches/categorias/precio")
        if r.status_code == 200:
            datos = r.json()
            categorias = datos.get("categorias_precio", [])

            if not categorias:
                print("\nüö´ No hay categor√≠as de precio disponibles.")
                return

            # Mostrar categor√≠as en tabla
            table_data = [[idx + 1, categoria] for idx, categoria in enumerate(categorias)]
            headers_table = ["#", "Categor√≠a de Precio"]

            print("\nüè∑Ô∏è Categor√≠as de precio disponibles:")
            print(tabulate(table_data, headers=headers_table, tablefmt="rounded_grid"))

        elif r.status_code == 404:
            error = r.json().get('error', 'No hay categor√≠as de precio disponibles.')
            print(f"\nüîç Error ({r.status_code}): {error}")

        else:
            print(f"\n‚ö†Ô∏è Error inesperado ({r.status_code}): {r.text}")

    except requests.exceptions.RequestException as e:
        print(f"\nüåê Error al conectar con el servidor: {e}")

def main() -> None:
    """
    Funci√≥n principal que inicia la aplicaci√≥n.

    Esta funci√≥n es el punto de entrada de la aplicaci√≥n. Llama a la funci√≥n `mostrar_menu_principal()` 
    para presentar al usuario un men√∫ interactivo desde el cual puede realizar diversas operaciones, como 
    gestionar coches, alquileres o consultar informaci√≥n.

    Notes
    -----
    - La funci√≥n no devuelve ning√∫n valor.
    - Dependiendo de la implementaci√≥n de `mostrar_menu_principal()`, esta funci√≥n podr√≠a incluir un bucle 
    infinito hasta que el usuario decida salir de la aplicaci√≥n.
    """
    mostrar_menu_principal()

main()